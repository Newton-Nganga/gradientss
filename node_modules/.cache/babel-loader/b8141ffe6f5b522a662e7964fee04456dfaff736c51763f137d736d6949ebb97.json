{"ast":null,"code":"import tinycolor, { random } from 'tinycolor2';\nexport default function useGenerateGradients(num) {\n  const grad = [];\n  for (let i = 0; i < num; i++) {\n    // Generate two random colors\n    // const color1 = tinycolor.random().toHexString();\n    // const color2 = tinycolor.random().toHexString();\n    //const color1 = tinycolor.random().analogous().toString();\n    //const color2 = tinycolor(color1).analogous().toString();\n\n    const baseColor = tinycolor.random().toString();\n\n    // Generate a tint or shade of the base color\n    const isTint = Math.random() >= 0.5; // Randomly determine whether to generate a tint or shade\n    const variationAmount = Math.floor(Math.random() * 30) + 10; // Randomly choose the amount of variation\n    const derivedColor = isTint ? tinycolor(baseColor).lighten(variationAmount).toString() : tinycolor(baseColor).darken(variationAmount).toString();\n    const directions = [\"to right\", \"to left\", \"to bottom\", \"to top\"];\n    const direction = directions[Math.floor(Math.random() * directions.length)];\n    // Create the CSS linear gradient string\n    const gradient = `linear-gradient(${direction}, ${color1}, ${color2})`;\n\n    // Return the gradient\n    grad.push(gradient);\n  }\n  return grad; //an array of gradients\n}","map":{"version":3,"names":["tinycolor","random","useGenerateGradients","num","grad","i","baseColor","toString","isTint","Math","variationAmount","floor","derivedColor","lighten","darken","directions","direction","length","gradient","color1","color2","push"],"sources":["/home/newton_nganga/Development/Projects/Reactjs-sites/gradient/src/Utils/useGenerateGradients.js"],"sourcesContent":["import tinycolor, { random } from 'tinycolor2'\n\nexport default function useGenerateGradients(num){\n   const grad =[]\n    for(let i = 0; i< num;i++){\n      // Generate two random colors\n      // const color1 = tinycolor.random().toHexString();\n      // const color2 = tinycolor.random().toHexString();\n      //const color1 = tinycolor.random().analogous().toString();\n      //const color2 = tinycolor(color1).analogous().toString();\n      \n      \n      const baseColor = tinycolor.random().toString();\n\n      // Generate a tint or shade of the base color\n      const isTint = Math.random() >= 0.5; // Randomly determine whether to generate a tint or shade\n      const variationAmount = Math.floor(Math.random() * 30) + 10; // Randomly choose the amount of variation\n      const derivedColor = isTint\n        ? tinycolor(baseColor).lighten(variationAmount).toString()\n        : tinycolor(baseColor).darken(variationAmount).toString();\n\n      const directions = [\"to right\",\"to left\",\"to bottom\", \"to top\"]\n      const direction = directions[Math.floor(Math.random()*directions.length)]\n      // Create the CSS linear gradient string\n      const gradient = `linear-gradient(${direction}, ${color1}, ${color2})`;\n    \n      // Return the gradient\n      grad.push(gradient)\n    }\n  return grad   //an array of gradients\n}\n"],"mappings":"AAAA,OAAOA,SAAS,IAAIC,MAAM,QAAQ,YAAY;AAE9C,eAAe,SAASC,oBAAoB,CAACC,GAAG,EAAC;EAC9C,MAAMC,IAAI,GAAE,EAAE;EACb,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAEF,GAAG,EAACE,CAAC,EAAE,EAAC;IACxB;IACA;IACA;IACA;IACA;;IAGA,MAAMC,SAAS,GAAGN,SAAS,CAACC,MAAM,EAAE,CAACM,QAAQ,EAAE;;IAE/C;IACA,MAAMC,MAAM,GAAGC,IAAI,CAACR,MAAM,EAAE,IAAI,GAAG,CAAC,CAAC;IACrC,MAAMS,eAAe,GAAGD,IAAI,CAACE,KAAK,CAACF,IAAI,CAACR,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;IAC7D,MAAMW,YAAY,GAAGJ,MAAM,GACvBR,SAAS,CAACM,SAAS,CAAC,CAACO,OAAO,CAACH,eAAe,CAAC,CAACH,QAAQ,EAAE,GACxDP,SAAS,CAACM,SAAS,CAAC,CAACQ,MAAM,CAACJ,eAAe,CAAC,CAACH,QAAQ,EAAE;IAE3D,MAAMQ,UAAU,GAAG,CAAC,UAAU,EAAC,SAAS,EAAC,WAAW,EAAE,QAAQ,CAAC;IAC/D,MAAMC,SAAS,GAAGD,UAAU,CAACN,IAAI,CAACE,KAAK,CAACF,IAAI,CAACR,MAAM,EAAE,GAACc,UAAU,CAACE,MAAM,CAAC,CAAC;IACzE;IACA,MAAMC,QAAQ,GAAI,mBAAkBF,SAAU,KAAIG,MAAO,KAAIC,MAAO,GAAE;;IAEtE;IACAhB,IAAI,CAACiB,IAAI,CAACH,QAAQ,CAAC;EACrB;EACF,OAAOd,IAAI,EAAG;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}